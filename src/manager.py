#!/usr/bin/env python
# -*- coding: utf-8 -*-

#   Copyright (c) 2010-2016, MIT Probabilistic Computing Project
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import os
import sqlite3
import subprocess

import notebook.auth

from utils_unix import unix_group_exists
from utils_unix import unix_user_adddir
from utils_unix import unix_user_addgroup
from utils_unix import unix_user_create
from utils_unix import unix_user_exists
from utils_unix import unix_user_home
from utils_unix import unix_user_id
from utils_unix import unix_user_ingroup


def jupyter_config_create(username, venv, prefix=None):
    if prefix and not str.startswith(username, prefix):
        raise ValueError(
            'Username must start with "%s": %s' % (prefix, username,))
    if not unix_user_exists(username):
        raise ValueError('No such user: %s' % (username,))

    # Retrieve a password for the jupyter server.
    passwd = notebook.auth.passwd()

    # Create a .jupyter/jupter_notebook_config.py file.
    process = subprocess.Popen(
        'sudo -iu %s sh -c "'
            ' . %s/bin/activate;'
            ' cd ~;'
            ' jupyter notebook --generate-config -y;'
            '"' % (username, venv),
        shell=True)
    process.wait()

    # XXX For demo
    process = subprocess.Popen(
        'sudo -iu %s sh -c "'
            ' mkdir -p ~/.ipython/profile_default/startup;'
            ' cd ~/.ipython/profile_default/startup;'
            ' echo import warnings >> disable_warnings.py;'
            ' echo \'warnings.filterwarnings(\\"ignore\\")\' >> disable_warnings.py;'
            '"' % (username),
        shell=True)
    process.wait()

# import warnings
# warnings.filterwarnings('ignore')


    # Add lines to the configuration file.
    # XXX TODO: This function must be modified when nginx is used.
    process = subprocess.Popen(
        'sudo -iu %s sh -c "'
            ' cd ~/.jupyter;'
            ' echo >> jupyter_notebook_config.py;'
            ' echo \# Configuration generated by iventure_manager >> jupyter_notebook_config.py;'
            ' echo \'c.NotebookApp.open_browser = False\' >> jupyter_notebook_config.py;'
            ' echo \'c.NotebookApp.ip = u\\"0.0.0.0\\"\' >> jupyter_notebook_config.py;'
            ' echo \'c.NotebookApp.password = u\\"%s\\"\' >> jupyter_notebook_config.py;'
            '"' % (username, passwd,),
        shell=True)
    process.wait()


def jupyter_find_pid_port(username):
    if not unix_user_exists(username):
        raise ValueError('No such user: %s' % (username,))

    # Use netstat to find all the processes (`$9`) belonging to the user_id
    # (`$7`) which are listening on `0.0.0.0/port`.
    # XXX TODO This function must be modfied when nginx is used.
    process = subprocess.Popen(
        'sudo netstat -lnptue | '
            'awk \'($4 ~ /0.0.0.0/) && ($7==%d)'
            '{split($4,prt,":"); split($9,pid,"/"); print (pid[1]"--"prt[2])}\''
        % (unix_user_id(username),),
        shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    output, _err = process.communicate()

    results = [str.split(p, '--') for p in str.split(output, '\n') if p]
    return [(int(p[0]), int(p[1])) for p in results]


def jupyter_server_start(username, venv, force=None):
    if not unix_user_exists(username):
        raise ValueError('No such user: %s' % (username,))

    # Only one server per `username` is allowed, unless `force`.
    pids = jupyter_find_pid_port(username)
    if pids and not force:
        raise ValueError(
            'User already %s has servers at [(pids, ports)]: %s.'
            % (username, pids,))

    subprocess.Popen(
        'sudo -iu %s sh -c ". %s/bin/activate;'
        'cd ~; '
        'nohup jupyter notebook;"'
            % (username, venv),
        shell=True)

    import time; time.sleep(1)
    (pid, port) = jupyter_find_pid_port(username)[-1]
    print 'Server running at pid, port: %d, %d.' % (pid, port)


def jupyter_server_stop(username):
    if not unix_user_exists(username):
        raise ValueError('No such user: %s' % (username,))

    pids = jupyter_find_pid_port(username)
    if not pids:
        raise ValueError('No servers for user: %s.' % (username,))
    print 'Killing servers: %s' % (pids,)
    for pid, _prt in pids:
        pgrp = os.getpgid(pid)
        subprocess.Popen('sudo kill -9 -%d' % (pgrp), shell=True)
    print 'Killed.'


class IVentureManager(object):
    '''IVentureManager is a simple command line utitly for:

        - Creating new UNIX users on a server to interact with iVenture.
        - Starting a Jupyter server for a user.
        - Terminating the Jupyter server for a user.
    '''


    # `dir_root` contains all the home directories for the created users.
    # `dir_venv` contains the python virtualenvironment shared by all the users.
    # `grp_unix` is the UNIX group to which all users belong.
    # `usr_prefix` is the prefix for users created by this manager.

    CONFIG = {
        'dir_root': os.path.join('/','scratch','pp_iventure'),
        'dir_venv': os.path.join('/','scratch','pp_iventure', '.pyenv2.7.6'),
        'grp_unix': 'pp_iventure',
        'usr_prefix': 'pp_',
    }

    def __init__( self, dir_root=None, dir_venv=None, grp_unix=None,
            usr_prefix=None):
        if dir_root is None:
            dir_root = IVentureManager.CONFIG['dir_root']
        if dir_venv is None:
            dir_venv = IVentureManager.CONFIG['dir_venv']
        if grp_unix is None:
            grp_unix = IVentureManager.CONFIG['grp_unix']
        if usr_prefix is None:
            usr_prefix = IVentureManager.CONFIG['usr_prefix']

        self.dir_root = dir_root
        self.dir_venv = dir_venv
        self.grp_unix = grp_unix
        self.usr_prefix = usr_prefix

    def user_create(self, username):
        if not str.startswith(username, self.usr_prefix):
            raise ValueError(
                'Username must start with "%s": %s'
                % (self.usr_prefix, username,))

        if unix_user_exists(username):
            raise ValueError('Username already exists: %s' % (username,))

        # Create UNIX username, if does not exist, with home under dir_root.
        print 'Creating UNIX user: %s' % (username,)
        unix_user_create(username, os.path.join(self.dir_root, username))

        # TODO Prepare the jupyter server configruation.
        print 'Creating a jupyter configuration file.'
        jupyter_config_create(username, self.dir_venv)


    def server_start(self, username):
        jupyter_server_start(username, self.dir_venv)


    def server_stop(self, username):
        jupyter_server_stop(username)


    def server_status(self, username):
        pids = jupyter_find_pid_port(username)
        if not pids:
            print 'No active servers for: %s' % (username,)
        else:
            print 'User %s has servers at [(pids, ports)]: %s.'\
            % (username, pids,)


    def server_restart(self, username):
        self.server_stop(username)
        self.server_start(username)


if __name__ == '__main__':

    import argparse
    parser = argparse.ArgumentParser()

    subparsers = parser.add_subparsers()

    parser_user_create = subparsers.add_parser('user_create')
    parser_user_create.add_argument('username', type=str)
    parser_user_create.set_defaults(
        func=lambda args: IVentureManager().user_create(args.username))

    parser_server_start = subparsers.add_parser('server_start')
    parser_server_start.add_argument('username', type=str)
    parser_server_start.set_defaults(
        func=lambda args: IVentureManager().server_start(args.username))

    parser_server_stop = subparsers.add_parser('server_stop')
    parser_server_stop.add_argument('username', type=str)
    parser_server_stop.set_defaults(
        func=lambda args: IVentureManager().server_stop(args.username))

    parser_server_status = subparsers.add_parser('server_status')
    parser_server_status.add_argument('username', type=str)
    parser_server_status.set_defaults(
        func=lambda args: IVentureManager().server_status(args.username))

    parser_restart = subparsers.add_parser('server_restart')
    parser_restart.add_argument('username', type=str)
    parser_restart.set_defaults(
        func=lambda args: IVentureManager().server_restart(args.username))

    args = parser.parse_args()
    args.func(args)
